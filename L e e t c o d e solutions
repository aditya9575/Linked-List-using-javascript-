203. Remove Linked List Elements
Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

Example 1:
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Constraints:
The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50


Solution------> 
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} val
 * @return {ListNode}
 */
var removeElements = function(head, val) {

// Handle the case where the first element(s) should be removed
//The reason for having a separate condition to handle the removal of the first element is to ensure that the head pointer is correctly
updated if the first element(s) of the linked list have the specified value. If the head itself needs to be removed, we update the head to the next node. After handling the special case of the head, we can proceed with iterating through the rest of the linked list.
    while (head !== null && head.val === val) {
        head = head.next;
    }

//we store head in temp so that we don't loose our entire linked list 
    let temp = head;

// Iterate through the list to remove elements with the specified value
//we in while loop check that our head should'nt be null and also its next element should'nt be null
    while (temp !== null && temp.next !== null) {

//we check that if the value of temp.next because initially we have handled the case of popping the head so ultimately we start the checking from the second element that is why we use if our second element onwards is equal to value we make our pointer move to the next node (temp.next.val === val) else we simply move to the next node for checking the same value comparison          
        if (temp.next.val === val) {
            temp.next = temp.next.next;
        } else {
            temp = temp.next;
        }
    }

//remember we only use temp to update link list some how i.e for deletion/updation etc but if we want to return the updated link list we will always return the head 
    return head; 

};

==============================================================================================================================================

237. Delete Node in a Linked List

There is a singly-linked list head and we want to delete a node node in it.
You are given the node to be deleted node. You will not be given access to the first node of head.All the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.
Delete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:

The value of the given node should not exist in the linked list.
The number of nodes in the linked list should decrease by one.
All the values before node should be in the same order.
All the values after node should be in the same order.
Custom testing:

For the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.
We will build the linked list and pass the node to your function.
The output will be the entire list after calling your function.
 

Example 1:
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.

Constraints:
The number of the nodes in the given list is in the range [2, 1000].
-1000 <= Node.val <= 1000
The value of each node in the list is unique.
The node to be deleted is in the list and is not a tail node.



Solution------> 
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} node
 * @return {void} Do not return anything, modify node in-place instead.
 */
var deleteNode = function(node) {
    
//Check if the input node is null, if so return as there is nothing to delete.
if(node === null){ return ; }

else{
//If the node is not null, update its value to be the value of its next node and its next reference to be the next reference of its next node.This effectively removes the next node and connects the current node to the node after the next node, thus deleting the current node.    
    if(node.next !== null){
        node.val = node.next.val;
        node.next = node.next.next;
    }
}

}



// the inner if block -> This condition checks whether the current node (node) has a next node (node.next). If node.next is not null, it means there is a node to be deleted.
// If this condition is not met (i.e., node.next is null), the block is skipped, and nothing is done. This check ensures that the operation inside the block is only performed when there is a next node to delete.

// If the condition is met (there is a next node), the following operations are executed:
// node.val = node.next.val;: This line updates the value of the current node (node) to be the value of its next node (node.next). Essentially, it copies the value of the next node to the current node.
// node.next = node.next.next;: This line updates the next reference of the current node to skip the next node and point directly to the node after the next node. This effectively removes the next node from the linked list.

==============================================================================================================================================


160. Intersection of Two Linked Lists

Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:

The test cases are generated such that there are no cycles anywhere in the entire linked structure.
Note that the linked lists must retain their original structure after the function returns.
Custom Judge:

The inputs to the judge are given as follows (your program is not given these inputs):

intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.

 

Example 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.

Constraints:
The number of nodes of listA is in the m.
The number of nodes of listB is in the n.
1 <= m, n <= 3 * 104
1 <= Node.val <= 105
0 <= skipA < m
0 <= skipB < n
intersectVal is 0 if listA and listB do not intersect.
intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.


Solution------> 
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} headA
 * @param {ListNode} headB
 * @return {ListNode}
 */
var getIntersectionNode = function(headA, headB) {
    
let set = new Set();

    // Traverse the first linked list and add each node to the set
    let currentA = headA;
    while (currentA) {
        set.add(currentA);
        currentA = currentA.next;
    }

    // Traverse the second linked list
    let currentB = headB;
    while (currentB) {
        // If the current node is already in the set, it's the intersection point
        if (set.has(currentB)) {
            return currentB;
        }
        else{
        currentB = currentB.next;
        }
    }

    // If there is no intersection
    return null;

};

//solution approach we are using set to solve it the initial approach is that we make a new set that is storing the 1st linked list step by step using .add method to our set and then we are iterating forwards to store the next element of the list i.e-> set.add(currentA); currentA = currentA.next;

//now we check if our set has the current element / head of the second linked list and if yes we return that node else we traverse ahead in the check process of the further node of the second linked list

//else if we don't find any node of the second linked list in our set we return null as an answer

==============================================================================================================================================
206. Reverse Linked List
Given the head of a singly linked list, reverse the list, and return the reversed list.

Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Constraints:
The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000


Solution------> 

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var reverseList = function(head) {


//in this approach we convert our list to array and reverse the array and the ultimately return the list after conversion from array 

let arr = []

while(head !== null){
    arr.push(head.val);
    head=head.next;
}

//we are handeling the test case where our head is empty so the array length will be zero meaning there is nothing to reverse so we return null
if(arr.length === 0 ){return null}

arr.reverse();

 let newHead = new ListNode(arr[0]);
    let current = newHead;
//The reason why we are starting our loop from 1 is because we already have created the 1st node outside the loop i.e->      let newHead = new ListNode(arr2[0]); 
//then when we traverse over the left over array and we keep pointing and incrementing the iterator to ultimately have our desired link list in the end  
    for (let i = 1; i < arr.length; i++) {
        current.next = new ListNode(arr[i]);
        current = current.next;
    }

    return newHead;

};

==============================================================================================================================================

234. Palindrome Linked List
Given the head of a singly linked list, return true if it is a 
palindrome
or false otherwise.

 
Example 1:
Input: head = [1,2,2,1]
Output: true

Constraints:
The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9


Solution------>
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
var isPalindrome = function(head) {
//we make in an array and use .push() method to fill it with the head/linked list so that now we can easily traverse over the array from both the ends and check if the current value at both the pointers on the current iteration is equal and if true at the end we return that yes it is a palindrome linked list 
    let arr = [];

    let temp = head;

    while (temp !== null) {
        arr.push(temp.val);
        temp = temp.next;
    }

//we are using two pointer approach of left & right and we are incrementing left and at the same time on the next iteration we are decrementing the right pointer
    let left = 0;
    let right = arr.length - 1;

//we are using this condition to iterate over till middle from both the sides and check if the values from both the sides at the current iterations are not equal we return false else we return true 
    while (left <= right) {
        if (arr[left] !== arr[right]) {
            return false;
        }
        left++;
        right--;
    }

    return true;
};

==============================================================================================================================================

61. Rotate List
Given the head of a linked list, rotate the list to the right by k places.

Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Constraints:
The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

Solution------>
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} k
 * @return {ListNode}
 */
var rotateRight = function(head, k) {

//we handle the edge case that if our head is null or our k is given a 0 we will return head 
    if (head===null || k === 0) {
        return head;
    }

    // we initially Convert linked list to array so that we can operate with ease 
    let arr1 = [];
    let temp = head;

//we have a while loop that checks when head is not equal to null we push the value of the current node and then after we keep iterating to next node till we reach the last node
    while (temp !== null) {
        arr1.push(temp.val);
        temp = temp.next;
    }

//then we make another array of the same length as array1 for comparison and fill it with 0 
    let arr2 = [];
    for (let i = 0; i < arr1.length; i++) {
        arr2.push(0);
    }

//now we perform the rotation of the array by given k places this is done using the formulae of achieving rotation ->arr2[(i+k)%arr1.length] =arr1[i]
//arr1 is the array with all the elements of our linked list and the arr2 is the comparison array of the exact length of arr1 filled with zeros 
//now we run a loop from 0 till array1's end element and then inside it we achieve the desired rotation by comparing 
//suppose arr1[1,2,3,4,5] k=2 arr2[0,0,0,0,0]
// //now we start rotating using arr2[(j+k)%arr1.length] = arr1[j];
// formula        assingment                  final value in arr2
//                                              index  |  value
// (0+2)%5=2      arr2[2] = arr1[o]               0         4
// (1+2)%5=3      arr2[3] = arr1[1]               1         5
// (2+2)%5=4      arr2[4] = arr1[2]               2         1
// (3+2)%5=0      arr2[0] = arr1[3]               3         2  
// (4+2)%5=1      arr2[1] = arr1[4]               4         3
// hence achieveing the rotated array by k=2 elements ->arr2=[4,5,1,2,3]

    for (let j = 0; j < arr1.length; j++) {
        arr2[(j + k) % arr1.length] = arr1[j];
    }

  
//NOW in the above we have achieved our rotated array and now we simply have to convert this rotated array to our linklist and then we need to return it as the desired answer i.e -> Create a linked list from arr2
//REMEMBER -> REMEMBER WE ARE MAKING THIS NEW LINK LIST IN THIS WAY BECAUSE THE SYNTAX OF CREATING A NEW LINK LIST IS new ClassName(); and as the creation of ListNode class is being done in the backend including the making of the ListNode class having a constructor in it and assigning head and value to it so we will simply work with the above given information and create a new list (dummy)
//below we create our new link list and initialize its 1st node with the 0th element with arr[0] i.e the 1st element of our rotated array and then after we make the rest of the link list below starting from the next element of our array i.e 1st
    let newHead = new ListNode(arr2[0]);
    let current = newHead;
//The reason why we are starting our loop from 1 is because we already have created the 1st node outside the loop i.e->      let newHead = new ListNode(arr2[0]); 
//then when we traverse over the left over array and we keep pointing and incrementing the iterator to ultimately have our desired link list in the end  
    for (let i = 1; i < arr2.length; i++) {
        current.next = new ListNode(arr2[i]);
        current = current.next;
    }

    return newHead;
};

==============================================================================================================================================
21. Merge Two Sorted Lists
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

 Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

Constraints:
The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.

Solution------>
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val === undefined ? 0 : val)
 *     this.next = (next === undefined ? null : next)
 * }
 */

/**
 * @param {ListNode} list1
 * @param {ListNode} list2
 * @return {ListNode}
 */
var mergeTwoLists = function (list1, list2) {

//we handle the edge case where we take in count that if list1 is null we return list 2 and vice versa for list2 we return list 1 when found empty
    if (list1 === null) {
        return list2;
    }
    if (list2 === null) {
        return list1;
    }

//we then after create a new linked list and start by preserving this inside a new variable we created named current so that the link list is not lost in any case AND REMEMBER WE ARE MAKING THIS NEW LINK LIST IN THIS WAY BECAUSE THE SYNTAX OF CREATING A NEW LINK LIST IS new ClassName(); and as the creation of ListNode class is being done in the backend including the making of the ListNode class having a constructor in it and assigning head and value to it so we will simply work with the above given information and create a new list (dummy)   
    let dummy = new ListNode();
    let current = dummy;


//NOW after having a new linked list we use a while loop to check if and when  list1 and list2 are not null we inside this while loop have a check condition that checks if the current value of list1 is less than the current value of list2 in such a case we simply point the current/dummy list that we newly created , pointer to this list1 pointer which is less than the list2 and we also move the list1's pointer to the next node and this process of comparison takes place continuously till we ultimately enctounter a list1 element that is greater than the list2 element in such a case we enter the else block and inside it we simply point the next pointer of our resultant link list (current/dummy) to this list2 node/ pointer and we increment the list2 pointer to the next node
    while (list1 !== null && list2 !== null) {
        if (list1.val < list2.val) {
            current.next = list1;
            list1 = list1.next;
        } else {
            current.next = list2;
            list2 = list2.next;
        }
        current = current.next;
    }

    // If one of the lists is not empty, append it to the result
//here then after having a comparison logic to have a sorted resultant link list from both the given link list1 and list2 we just need to handle another edge case that is if the length of the 2 given link list differ in such case whilst having our comparison and increments we are bound to end up in a situation in which we won't have something to compare against the another as one of the link list has been of lesser length than another so when we encounter such a thing i.e when list1 is not null we point the current.next = list1 else if list1 pointing to null we pointour current/dummy list's pointer to list2 
//AND SO ON THE COMPARISON GOES ON TILL WE GET A SORTED AND COMBINED LINKED LIST STORED INSIDE OUR DUMMY LINK LIST AND THEN WE RETURN IT AS AN ANSWER   
    if (list1 !== null) {
        current.next = list1;
    } else {
        current.next = list2;
    }

    return dummy.next;
};

==============================================================================================================================================

2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Constraints:
The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

Solution------>

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function (l1, l2) {

//we start by creating a new linked with the value of its 1st node as "0" list and preservinng its head
    let dummyHead = new ListNode(0);
    let current = dummyHead;

//The carry variable is initialized to 0 and is used to keep track of any carry generated during the addition of corresponding digits from l1 and l2. In the context of adding two numbers represented by linked lists, the carry variable helps manage situations where the sum of two digits exceeds 9, resulting in a carry to the next higher place value.   
    let carry = 0;

// This loop continues as long as at least one of the conditions is true. The conditions are:
    // l1: Checks if there are more nodes in the first linked list.
    // l2: Checks if there are more nodes in the second linked list.
    // carry: Checks if there is any remaining carry from the previous step.

    while (l1 || l2 || carry) {
        let x, y;

//we use if else blocks to assign values to x and y i.e if l1 is not null l1's value is being assigned to x else if its null we assign the value of x as 0 and then we do the same for y and l2
        if (l1 !== null) {
            x = l1.val;
        } else {
            x = 0;
        }

        if (l2 !== null) {
            y = l2.val;
        } else {
            y = 0;
        }

// now after we have our values stored inside our x and why for each iteration we now calculate the sum of x + y + carry
        const sum = x + y + carry;
// Update carry for the next calculation.        
        carry = Math.floor(sum / 10);

//When creating a new node in the result linked list, we initialize its value with sum % 10. This step is necessary because we are dealing with a scenario where the sum of two digits (from l1 and l2) and the carry from the previous step might be greater than 9. In such cases, we need to ensure that the value of the current node in the result linked list represents the single-digit remainder of the sum.
        current.next = new ListNode(sum % 10);
        current = current.next;

//The pointers l1 and l2 are moved to their next nodes.
        if (l1) {
            l1 = l1.next;
        }

        if (l2) {
            l2 = l2.next;
        }
    }

//in the end we return our new linked list as the desired result
    return dummyHead.next;
};

==============================================================================================================================================
19. Remove Nth Node From End of List
Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

Solution------>

var removeNthFromEnd = function(head, n) {
 if (head === null || (head.next === null && n === 1)) {
        return null; // Special case: empty list or removing the only element
    }

    let arr = [];

    // Store the linked list values in an array
    while (head !== null) {
        arr.push(head.val);
        head = head.next;
    }

// Calculate the index of the element to be removed.
// The index is determined by subtracting 'n' from the length of the array.
// 'n' represents the position from the end of the array.
let idxToRemove = arr.length - n;

// Use the splice function to remove one element at the calculated index.
// The first argument of splice is the starting index, and the second argument
// is the number of elements to be removed.
arr.splice(idxToRemove, 1);

// After this operation, the array 'arr' no longer contains the element
// that corresponds to the nth node from the end of the original linked list.


    // Creating a new linked list from the modified array
    let newHead = new ListNode(arr[0]);
    let current = newHead;

    for (let i = 1; i < arr.length; i++) {
        current.next = new ListNode(arr[i]);
        current = current.next;
    }

    return newHead;
};


==============================================================================================================================================




